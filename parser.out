Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ID

Grammar

Rule 0     S' -> expr
Rule 1     expr -> START SEPARATOR
Rule 2     expr -> rule SEPARATOR
Rule 3     rule -> mult_tokens TO mult_tokens
Rule 4     mult_tokens -> token
Rule 5     mult_tokens -> mult_tokens token
Rule 6     token -> TERM
Rule 7     token -> NONTERM
Rule 8     token -> EPS

Terminals, with rules where they appear

EPS                  : 8
ID                   : 
NONTERM              : 7
SEPARATOR            : 1 2
START                : 1
TERM                 : 6
TO                   : 3
error                : 

Nonterminals, with rules where they appear

expr                 : 0
mult_tokens          : 3 3 5
rule                 : 2
token                : 4 5

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . START SEPARATOR
    (2) expr -> . rule SEPARATOR
    (3) rule -> . mult_tokens TO mult_tokens
    (4) mult_tokens -> . token
    (5) mult_tokens -> . mult_tokens token
    (6) token -> . TERM
    (7) token -> . NONTERM
    (8) token -> . EPS

    START           shift and go to state 2
    TERM            shift and go to state 6
    NONTERM         shift and go to state 7
    EPS             shift and go to state 8

    expr                           shift and go to state 1
    rule                           shift and go to state 3
    mult_tokens                    shift and go to state 4
    token                          shift and go to state 5

state 1

    (0) S' -> expr .



state 2

    (1) expr -> START . SEPARATOR

    SEPARATOR       shift and go to state 9


state 3

    (2) expr -> rule . SEPARATOR

    SEPARATOR       shift and go to state 10


state 4

    (3) rule -> mult_tokens . TO mult_tokens
    (5) mult_tokens -> mult_tokens . token
    (6) token -> . TERM
    (7) token -> . NONTERM
    (8) token -> . EPS

    TO              shift and go to state 11
    TERM            shift and go to state 6
    NONTERM         shift and go to state 7
    EPS             shift and go to state 8

    token                          shift and go to state 12

state 5

    (4) mult_tokens -> token .

    TO              reduce using rule 4 (mult_tokens -> token .)
    TERM            reduce using rule 4 (mult_tokens -> token .)
    NONTERM         reduce using rule 4 (mult_tokens -> token .)
    EPS             reduce using rule 4 (mult_tokens -> token .)
    SEPARATOR       reduce using rule 4 (mult_tokens -> token .)


state 6

    (6) token -> TERM .

    TO              reduce using rule 6 (token -> TERM .)
    TERM            reduce using rule 6 (token -> TERM .)
    NONTERM         reduce using rule 6 (token -> TERM .)
    EPS             reduce using rule 6 (token -> TERM .)
    SEPARATOR       reduce using rule 6 (token -> TERM .)


state 7

    (7) token -> NONTERM .

    TO              reduce using rule 7 (token -> NONTERM .)
    TERM            reduce using rule 7 (token -> NONTERM .)
    NONTERM         reduce using rule 7 (token -> NONTERM .)
    EPS             reduce using rule 7 (token -> NONTERM .)
    SEPARATOR       reduce using rule 7 (token -> NONTERM .)


state 8

    (8) token -> EPS .

    TO              reduce using rule 8 (token -> EPS .)
    TERM            reduce using rule 8 (token -> EPS .)
    NONTERM         reduce using rule 8 (token -> EPS .)
    EPS             reduce using rule 8 (token -> EPS .)
    SEPARATOR       reduce using rule 8 (token -> EPS .)


state 9

    (1) expr -> START SEPARATOR .

    $end            reduce using rule 1 (expr -> START SEPARATOR .)


state 10

    (2) expr -> rule SEPARATOR .

    $end            reduce using rule 2 (expr -> rule SEPARATOR .)


state 11

    (3) rule -> mult_tokens TO . mult_tokens
    (4) mult_tokens -> . token
    (5) mult_tokens -> . mult_tokens token
    (6) token -> . TERM
    (7) token -> . NONTERM
    (8) token -> . EPS

    TERM            shift and go to state 6
    NONTERM         shift and go to state 7
    EPS             shift and go to state 8

    mult_tokens                    shift and go to state 13
    token                          shift and go to state 5

state 12

    (5) mult_tokens -> mult_tokens token .

    TO              reduce using rule 5 (mult_tokens -> mult_tokens token .)
    TERM            reduce using rule 5 (mult_tokens -> mult_tokens token .)
    NONTERM         reduce using rule 5 (mult_tokens -> mult_tokens token .)
    EPS             reduce using rule 5 (mult_tokens -> mult_tokens token .)
    SEPARATOR       reduce using rule 5 (mult_tokens -> mult_tokens token .)


state 13

    (3) rule -> mult_tokens TO mult_tokens .
    (5) mult_tokens -> mult_tokens . token
    (6) token -> . TERM
    (7) token -> . NONTERM
    (8) token -> . EPS

    SEPARATOR       reduce using rule 3 (rule -> mult_tokens TO mult_tokens .)
    TERM            shift and go to state 6
    NONTERM         shift and go to state 7
    EPS             shift and go to state 8

    token                          shift and go to state 12
